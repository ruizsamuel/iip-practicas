#BlueJ class context
comment0.target=Point
comment0.text=\ \ \r\n\ \ Clase\ Point\:\ clase\ "tipo\ de\ datos"\ que\ define\ un\ punto\ en\ el\ plano\ \r\n\ \ cartesiano,\ determinado\ por\ sus\ coordenadas\ x\ e\ y.\ \r\n\ \ \r\n\ \ @author\ IIP\ -\ Parcial\ 1\ Laboratorio\r\n\ \ @version\ Curso\ 2021/22\r\n
comment1.params=px\ py
comment1.target=Point(double,\ double)
comment1.text=\ Crea\ un\ Point\ con\ abscisa\ px\ y\ ordenada\ py.\ \r\n\ \ @param\ px\ double,\ la\ abscisa.\r\n\ \ @param\ py\ double,\ la\ ordenada.\r\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\r\n\ Comprueba\ si\ el\ Point\ this\ es\ igual\ a\ otro\ Point\ dado.\r\n\ @param\ o\ Object,\ objeto\ a\ comparar\ con\ el\ Point\ this.\r\n\ @return\ boolean,\ true\ si\ o\ es\ un\ Point\ y\ las\ coordenadas\r\n\ x\ e\ y\ del\ Point\ this\ coinciden\ con\ las\ del\ Point\ dado\ y\ \r\n\ false\ en\ caso\ contrario.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ Devuelve\ un\ String\ que\ representa\ el\ Point\ this\ en\ el\ \ \r\n\ \ formato\ tipico\ matematico,\ i.e.,\ (abscisa,ordenada)\ \r\n\ \ @return\ String,\ el\ resultado.\r\n
comment12.params=m\ p
comment12.target=Point\ yIntercept(double,\ Point)
comment12.text=\ Dado\ un\ double\ m\ y\ un\ Point\ p,\ que\ junto\ con\ el\ Point\ this\ \ \r\n\ \ forma\ parte\ de\ una\ recta\ de\ pendiente\ m,\ devuelve\ this,\ p\ o\ \r\n\ \ el\ punto\ (0.0,0.0)\ si\ el\ termino\ independiente\ de\ la\ recta\ \r\n\ \ es\ negativo,\ positivo\ o\ cero,\ respectivamente.\r\n\ \ Precondici\u00F3n\:\ las\ abscisas\ de\ this\ y\ p\ son\ distintas\ y,\r\n\ \ por\ tanto,\ la\ pendiente\ m\ no\ es\ infinita\ (esto\ es,\ \r\n\ \ la\ recta\ no\ es\ paralela\ al\ eje\ Y).\r\n\ \ @param\ m\ double,\ la\ pendiente.\r\n\ \ @param\ p\ Point,\ el\ otro\ Point.\r\n\ \ @return\ Point,\ el\ resultado.\r\n
comment2.params=
comment2.target=Point()
comment2.text=Crea\ un\ Point\ con\ abscisa\ 0.0\ y\ ordenada\ 0.0.
comment3.params=
comment3.target=double\ getX()
comment3.text=\ Devuelve\ la\ abscisa\ del\ Point\ this.\ \r\n\ \ @return\ double,\ la\ abscisa.\ \ \ \ \ \ \r\n
comment4.params=
comment4.target=double\ getY()
comment4.text=\ Devuelve\ la\ ordenada\ del\ Point\ this.\r\n\ \ @return\ double,\ la\ ordenada.\r\n
comment5.params=px
comment5.target=void\ setX(double)
comment5.text=\ Actualiza\ la\ abscisa\ del\ Point\ this\ a\ px.\r\n\ \ @param\ px\ double,\ la\ nueva\ abscisa.\r\n
comment6.params=py
comment6.target=void\ setY(double)
comment6.text=\ Actualiza\ la\ ordenada\ del\ Point\ this\ a\ py.\ \r\n\ \ @param\ py\ double,\ la\ nueva\ ordenada.\r\n
comment7.params=px\ py
comment7.target=void\ move(double,\ double)
comment7.text=\ Actualiza\ la\ abscisa\ del\ Point\ this\ a\ px\ y\ la\ ordenada\ a\ py.\r\n\ \ @param\ px\ double,\ la\ nueva\ abscisa.\r\n\ \ @param\ py\ double,\ la\ nueva\ ordenada.\r\n
comment8.params=p
comment8.target=double\ distance(Point)
comment8.text=\ Devuelve\ la\ distancia\ entre\ el\ Point\ this\ y\ otro\ Point\ dado.\r\n\ \ @param\ p\ Point,\ el\ otro\ Point.\r\n\ \ @return\ double,\ la\ distancia.\r\n
comment9.params=
comment9.target=double\ distance()
comment9.text=\ Devuelve\ la\ distancia\ entre\ el\ Point\ this\ y\ el\ origen\r\n\ \ de\ coordenadas.\ \ \ \ \ \r\n\ \ @return\ double,\ la\ distancia.\r\n
numComments=13
